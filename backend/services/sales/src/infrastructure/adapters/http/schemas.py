from datetime import date, datetime
from uuid import UUID

from pydantic import BaseModel, Field, field_validator
from pydantic.alias_generators import to_camel

from src.domain.entities import Sale


class SaleIn(BaseModel):
    """
    Incoming schema for creating a sale.
    Client provides invoice_number, sale_date, seller_code, product_code.
    """

    invoice_number: str = Field(..., description="Unique invoice identifier")
    sale_date: date = Field(..., description="Date of the sale (YYYY-MM-DD)")
    seller_code: UUID = Field(..., description="UUID of the seller")
    product_code: UUID = Field(..., description="UUID of the product")

    @field_validator("sale_date")
    def check_not_future(cls, v: date) -> date:
        """
        Ensure sale_date is not in the future.
        """
        if v > date.today():
            raise ValueError("sale_date cannot be in the future")
        return v

    def to_domain(self) -> Sale:
        """
        Convert this payload into a domain Sale entity (id & created_at
        will be generated by the service/repo).
        """
        return Sale.new(  # assuming Sale.new(...) constructs with new UUID & timestamp
            invoice_number=self.invoice_number,
            sale_date=self.sale_date,
            seller_code=self.seller_code,
            product_code=self.product_code,
        )


class SaleOut(BaseModel):
    """
    Outgoing schema for sale responses, using camelCase aliases.
    """

    id: UUID = Field(..., description="UUID of the sale")
    invoice_number: str
    sale_date: date
    seller_code: UUID
    product_code: UUID
    created_at: datetime

    model_config = {
        "alias_generator": to_camel,
        "populate_by_name": True,
    }

    @classmethod
    def from_domain(cls, sale: Sale) -> "SaleOut":
        """
        Produce an output DTO from a domain Sale entity.
        """
        return cls(
            id=sale.id,
            invoice_number=sale.invoice_number,
            sale_date=sale.sale_date,
            seller_code=sale.seller_code,
            product_code=sale.product_code,
            created_at=sale.created_at,
        )
