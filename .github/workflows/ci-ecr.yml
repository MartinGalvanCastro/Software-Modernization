name: CI â†’ ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'services/products/**'
      - 'services/sales/**'
      - 'services/sellers/**'

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}   # set this in GitHub Secrets
  # you can also store ECR repo names in secrets or as literals if fixed:
  ECR_PREFIX: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [products, sales, sellers]

    defaults:
      run:
        working-directory: services/${{ matrix.service }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect changes in ${{ matrix.service }}
        id: changed
        run: |
          if git diff --name-only origin/main...HEAD \
             | grep -q "^services/${{ matrix.service }}/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip build if no changes
        if: steps.changed.outputs.changed == 'false'
        run: echo "No changes in services/${{ matrix.service }}, skipping."

      - name: Configure AWS credentials
        if: steps.changed.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions   # or use access keys
          # or use:
          # aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to Amazon ECR
        if: steps.changed.outputs.changed == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push Docker image
        if: steps.changed.outputs.changed == 'true'
        run: |
          IMAGE_URI=${ECR_PREFIX}/${{ matrix.service }}:${GITHUB_SHA}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          # also tag as :latest
          docker tag $IMAGE_URI ${ECR_PREFIX}/${{ matrix.service }}:latest
          docker push ${ECR_PREFIX}/${{ matrix.service }}:latest

      - name: Set output image URI
        if: steps.changed.outputs.changed == 'true'
        id: image
        run: |
          echo "::set-output name=sha_image::${ECR_PREFIX}/${{ matrix.service }}:${GITHUB_SHA}"
          echo "::set-output name=latest_image::${ECR_PREFIX}/${{ matrix.service }}:latest"
